/**
 * tells Prisma to generate a client library that I can use in my app
 * to query the db
 * - the client outputs to node_modules/.prisma/client
 * - monorep with each app, backend, posts frontend, and comments frontend,
 * in their own directory
 * - blog has posts and comments
 * - users must leave their username/email with their comments
 * - createdAt timestamp for posts and comments
 * - posts have titles
 * - comments do not have titles
 */
generator client {
    provider = "prisma-client-js"
}

// defines my db connection
datasource db {
    // tells Prisma I'm using PostgreSQL as the DB engine 
    provider = "postgresql"
    // connection string is stored in an environment variable
    url      = env("DATABASE_URL")
}

// defines my models in Prisma
// posts and comments
model Post {
    id        Int       @id @default(autoincrement())
    // will display timestamp for post
    createdAt DateTime  @default(now())
    // posts have titles
    title     String    @db.VarChar(255)
    content   String?
    /**
     * designates published/public vs unpublished/private posts
     */
    published Boolean   @default(false)
    author    User      @relation(fields: [authorId], references: [id])
    authorId  Int
    comments  Comment[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    // will display timestamp for comment
    createdAt DateTime @default(now())
    // comments don't have titles
    content   String
    // will require users to leave a email with their comments
    author    User     @relation(fields: [authorId], references: [id])
    authorId  Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
}

/**
 * minimal user model with blog authors and normal users
 * allows for easier route protection via authentication
 */
model User {
    id       Int       @id @default(autoincrement())
    name     String?
    username String    @unique
    password String
    posts    Post[]
    comments Comment[]
}
